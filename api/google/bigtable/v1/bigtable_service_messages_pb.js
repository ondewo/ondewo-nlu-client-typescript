// source: google/bigtable/v1/bigtable_service_messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_bigtable_v1_bigtable_data_pb = require('../../../google/bigtable/v1/bigtable_data_pb.js');
goog.object.extend(proto, google_bigtable_v1_bigtable_data_pb);
var google_rpc_status_pb = require('../../../google/rpc/status_pb.js');
goog.object.extend(proto, google_rpc_status_pb);
goog.exportSymbol('proto.google.bigtable.v1.CheckAndMutateRowRequest', null, global);
goog.exportSymbol('proto.google.bigtable.v1.CheckAndMutateRowResponse', null, global);
goog.exportSymbol('proto.google.bigtable.v1.MutateRowRequest', null, global);
goog.exportSymbol('proto.google.bigtable.v1.MutateRowsRequest', null, global);
goog.exportSymbol('proto.google.bigtable.v1.MutateRowsRequest.Entry', null, global);
goog.exportSymbol('proto.google.bigtable.v1.MutateRowsResponse', null, global);
goog.exportSymbol('proto.google.bigtable.v1.ReadModifyWriteRowRequest', null, global);
goog.exportSymbol('proto.google.bigtable.v1.ReadRowsRequest', null, global);
goog.exportSymbol('proto.google.bigtable.v1.ReadRowsRequest.TargetCase', null, global);
goog.exportSymbol('proto.google.bigtable.v1.ReadRowsResponse', null, global);
goog.exportSymbol('proto.google.bigtable.v1.ReadRowsResponse.Chunk', null, global);
goog.exportSymbol('proto.google.bigtable.v1.ReadRowsResponse.Chunk.ChunkCase', null, global);
goog.exportSymbol('proto.google.bigtable.v1.SampleRowKeysRequest', null, global);
goog.exportSymbol('proto.google.bigtable.v1.SampleRowKeysResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.ReadRowsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.bigtable.v1.ReadRowsRequest.oneofGroups_);
};
goog.inherits(proto.google.bigtable.v1.ReadRowsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.ReadRowsRequest.displayName = 'proto.google.bigtable.v1.ReadRowsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.ReadRowsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.v1.ReadRowsResponse.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.v1.ReadRowsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.ReadRowsResponse.displayName = 'proto.google.bigtable.v1.ReadRowsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_);
};
goog.inherits(proto.google.bigtable.v1.ReadRowsResponse.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.ReadRowsResponse.Chunk.displayName = 'proto.google.bigtable.v1.ReadRowsResponse.Chunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.SampleRowKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.v1.SampleRowKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.SampleRowKeysRequest.displayName = 'proto.google.bigtable.v1.SampleRowKeysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.SampleRowKeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.v1.SampleRowKeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.SampleRowKeysResponse.displayName = 'proto.google.bigtable.v1.SampleRowKeysResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.MutateRowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.v1.MutateRowRequest.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.v1.MutateRowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.MutateRowRequest.displayName = 'proto.google.bigtable.v1.MutateRowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.MutateRowsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.v1.MutateRowsRequest.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.v1.MutateRowsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.MutateRowsRequest.displayName = 'proto.google.bigtable.v1.MutateRowsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.v1.MutateRowsRequest.Entry.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.v1.MutateRowsRequest.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.MutateRowsRequest.Entry.displayName = 'proto.google.bigtable.v1.MutateRowsRequest.Entry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.MutateRowsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.v1.MutateRowsResponse.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.v1.MutateRowsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.MutateRowsResponse.displayName = 'proto.google.bigtable.v1.MutateRowsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.v1.CheckAndMutateRowRequest.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.v1.CheckAndMutateRowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.CheckAndMutateRowRequest.displayName = 'proto.google.bigtable.v1.CheckAndMutateRowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.v1.CheckAndMutateRowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.CheckAndMutateRowResponse.displayName = 'proto.google.bigtable.v1.CheckAndMutateRowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.v1.ReadModifyWriteRowRequest.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.v1.ReadModifyWriteRowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.v1.ReadModifyWriteRowRequest.displayName = 'proto.google.bigtable.v1.ReadModifyWriteRowRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.bigtable.v1.ReadRowsRequest.oneofGroups_ = [[2,3,8]];

/**
 * @enum {number}
 */
proto.google.bigtable.v1.ReadRowsRequest.TargetCase = {
  TARGET_NOT_SET: 0,
  ROW_KEY: 2,
  ROW_RANGE: 3,
  ROW_SET: 8
};

/**
 * @return {proto.google.bigtable.v1.ReadRowsRequest.TargetCase}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getTargetCase = function() {
  return /** @type {proto.google.bigtable.v1.ReadRowsRequest.TargetCase} */(jspb.Message.computeOneofCase(this, proto.google.bigtable.v1.ReadRowsRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.ReadRowsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.ReadRowsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadRowsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rowKey: msg.getRowKey_asB64(),
    rowRange: (f = msg.getRowRange()) && google_bigtable_v1_bigtable_data_pb.RowRange.toObject(includeInstance, f),
    rowSet: (f = msg.getRowSet()) && google_bigtable_v1_bigtable_data_pb.RowSet.toObject(includeInstance, f),
    filter: (f = msg.getFilter()) && google_bigtable_v1_bigtable_data_pb.RowFilter.toObject(includeInstance, f),
    allowRowInterleaving: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    numRowsLimit: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.ReadRowsRequest}
 */
proto.google.bigtable.v1.ReadRowsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.ReadRowsRequest;
  return proto.google.bigtable.v1.ReadRowsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.ReadRowsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.ReadRowsRequest}
 */
proto.google.bigtable.v1.ReadRowsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKey(value);
      break;
    case 3:
      var value = new google_bigtable_v1_bigtable_data_pb.RowRange;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.RowRange.deserializeBinaryFromReader);
      msg.setRowRange(value);
      break;
    case 8:
      var value = new google_bigtable_v1_bigtable_data_pb.RowSet;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.RowSet.deserializeBinaryFromReader);
      msg.setRowSet(value);
      break;
    case 5:
      var value = new google_bigtable_v1_bigtable_data_pb.RowFilter;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.RowFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowRowInterleaving(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumRowsLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.ReadRowsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.ReadRowsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadRowsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRowRange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_bigtable_v1_bigtable_data_pb.RowRange.serializeBinaryToWriter
    );
  }
  f = message.getRowSet();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_bigtable_v1_bigtable_data_pb.RowSet.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_bigtable_v1_bigtable_data_pb.RowFilter.serializeBinaryToWriter
    );
  }
  f = message.getAllowRowInterleaving();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNumRowsLimit();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes row_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getRowKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes row_key = 2;
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {string}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getRowKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKey()));
};


/**
 * optional bytes row_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getRowKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.setRowKey = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.google.bigtable.v1.ReadRowsRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.clearRowKey = function() {
  return jspb.Message.setOneofField(this, 2, proto.google.bigtable.v1.ReadRowsRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.hasRowKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RowRange row_range = 3;
 * @return {?proto.google.bigtable.v1.RowRange}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getRowRange = function() {
  return /** @type{?proto.google.bigtable.v1.RowRange} */ (
    jspb.Message.getWrapperField(this, google_bigtable_v1_bigtable_data_pb.RowRange, 3));
};


/**
 * @param {?proto.google.bigtable.v1.RowRange|undefined} value
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
*/
proto.google.bigtable.v1.ReadRowsRequest.prototype.setRowRange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.google.bigtable.v1.ReadRowsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.clearRowRange = function() {
  return this.setRowRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.hasRowRange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RowSet row_set = 8;
 * @return {?proto.google.bigtable.v1.RowSet}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getRowSet = function() {
  return /** @type{?proto.google.bigtable.v1.RowSet} */ (
    jspb.Message.getWrapperField(this, google_bigtable_v1_bigtable_data_pb.RowSet, 8));
};


/**
 * @param {?proto.google.bigtable.v1.RowSet|undefined} value
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
*/
proto.google.bigtable.v1.ReadRowsRequest.prototype.setRowSet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.google.bigtable.v1.ReadRowsRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.clearRowSet = function() {
  return this.setRowSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.hasRowSet = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RowFilter filter = 5;
 * @return {?proto.google.bigtable.v1.RowFilter}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getFilter = function() {
  return /** @type{?proto.google.bigtable.v1.RowFilter} */ (
    jspb.Message.getWrapperField(this, google_bigtable_v1_bigtable_data_pb.RowFilter, 5));
};


/**
 * @param {?proto.google.bigtable.v1.RowFilter|undefined} value
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
*/
proto.google.bigtable.v1.ReadRowsRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool allow_row_interleaving = 6;
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getAllowRowInterleaving = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.setAllowRowInterleaving = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 num_rows_limit = 7;
 * @return {number}
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.getNumRowsLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.google.bigtable.v1.ReadRowsRequest} returns this
 */
proto.google.bigtable.v1.ReadRowsRequest.prototype.setNumRowsLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.v1.ReadRowsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.ReadRowsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.ReadRowsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadRowsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowKey: msg.getRowKey_asB64(),
    chunksList: jspb.Message.toObjectList(msg.getChunksList(),
    proto.google.bigtable.v1.ReadRowsResponse.Chunk.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse}
 */
proto.google.bigtable.v1.ReadRowsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.ReadRowsResponse;
  return proto.google.bigtable.v1.ReadRowsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.ReadRowsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse}
 */
proto.google.bigtable.v1.ReadRowsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKey(value);
      break;
    case 2:
      var value = new proto.google.bigtable.v1.ReadRowsResponse.Chunk;
      reader.readMessage(value,proto.google.bigtable.v1.ReadRowsResponse.Chunk.deserializeBinaryFromReader);
      msg.addChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.ReadRowsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.ReadRowsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadRowsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.google.bigtable.v1.ReadRowsResponse.Chunk.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.ChunkCase = {
  CHUNK_NOT_SET: 0,
  ROW_CONTENTS: 1,
  RESET_ROW: 2,
  COMMIT_ROW: 3
};

/**
 * @return {proto.google.bigtable.v1.ReadRowsResponse.Chunk.ChunkCase}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.getChunkCase = function() {
  return /** @type {proto.google.bigtable.v1.ReadRowsResponse.Chunk.ChunkCase} */(jspb.Message.computeOneofCase(this, proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.ReadRowsResponse.Chunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowContents: (f = msg.getRowContents()) && google_bigtable_v1_bigtable_data_pb.Family.toObject(includeInstance, f),
    resetRow: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    commitRow: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.ReadRowsResponse.Chunk;
  return proto.google.bigtable.v1.ReadRowsResponse.Chunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_bigtable_v1_bigtable_data_pb.Family;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.Family.deserializeBinaryFromReader);
      msg.setRowContents(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResetRow(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCommitRow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.ReadRowsResponse.Chunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowContents();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_bigtable_v1_bigtable_data_pb.Family.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Family row_contents = 1;
 * @return {?proto.google.bigtable.v1.Family}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.getRowContents = function() {
  return /** @type{?proto.google.bigtable.v1.Family} */ (
    jspb.Message.getWrapperField(this, google_bigtable_v1_bigtable_data_pb.Family, 1));
};


/**
 * @param {?proto.google.bigtable.v1.Family|undefined} value
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} returns this
*/
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.setRowContents = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} returns this
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.clearRowContents = function() {
  return this.setRowContents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.hasRowContents = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool reset_row = 2;
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.getResetRow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} returns this
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.setResetRow = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} returns this
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.clearResetRow = function() {
  return jspb.Message.setOneofField(this, 2, proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.hasResetRow = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool commit_row = 3;
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.getCommitRow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} returns this
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.setCommitRow = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk} returns this
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.clearCommitRow = function() {
  return jspb.Message.setOneofField(this, 3, proto.google.bigtable.v1.ReadRowsResponse.Chunk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.ReadRowsResponse.Chunk.prototype.hasCommitRow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes row_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.getRowKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes row_key = 1;
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {string}
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.getRowKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKey()));
};


/**
 * optional bytes row_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.getRowKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.v1.ReadRowsResponse} returns this
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.setRowKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Chunk chunks = 2;
 * @return {!Array<!proto.google.bigtable.v1.ReadRowsResponse.Chunk>}
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.getChunksList = function() {
  return /** @type{!Array<!proto.google.bigtable.v1.ReadRowsResponse.Chunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.google.bigtable.v1.ReadRowsResponse.Chunk, 2));
};


/**
 * @param {!Array<!proto.google.bigtable.v1.ReadRowsResponse.Chunk>} value
 * @return {!proto.google.bigtable.v1.ReadRowsResponse} returns this
*/
proto.google.bigtable.v1.ReadRowsResponse.prototype.setChunksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.google.bigtable.v1.ReadRowsResponse.Chunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.v1.ReadRowsResponse.Chunk}
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.addChunks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.google.bigtable.v1.ReadRowsResponse.Chunk, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.ReadRowsResponse} returns this
 */
proto.google.bigtable.v1.ReadRowsResponse.prototype.clearChunksList = function() {
  return this.setChunksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.SampleRowKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.SampleRowKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.SampleRowKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.SampleRowKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.SampleRowKeysRequest}
 */
proto.google.bigtable.v1.SampleRowKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.SampleRowKeysRequest;
  return proto.google.bigtable.v1.SampleRowKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.SampleRowKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.SampleRowKeysRequest}
 */
proto.google.bigtable.v1.SampleRowKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.SampleRowKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.SampleRowKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.SampleRowKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.SampleRowKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.google.bigtable.v1.SampleRowKeysRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.v1.SampleRowKeysRequest} returns this
 */
proto.google.bigtable.v1.SampleRowKeysRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.SampleRowKeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.SampleRowKeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.SampleRowKeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowKey: msg.getRowKey_asB64(),
    offsetBytes: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.SampleRowKeysResponse}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.SampleRowKeysResponse;
  return proto.google.bigtable.v1.SampleRowKeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.SampleRowKeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.SampleRowKeysResponse}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffsetBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.SampleRowKeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.SampleRowKeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.SampleRowKeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOffsetBytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes row_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.getRowKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes row_key = 1;
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {string}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.getRowKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKey()));
};


/**
 * optional bytes row_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.getRowKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.v1.SampleRowKeysResponse} returns this
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.setRowKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 offset_bytes = 2;
 * @return {number}
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.getOffsetBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.google.bigtable.v1.SampleRowKeysResponse} returns this
 */
proto.google.bigtable.v1.SampleRowKeysResponse.prototype.setOffsetBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.v1.MutateRowRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.MutateRowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.MutateRowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rowKey: msg.getRowKey_asB64(),
    mutationsList: jspb.Message.toObjectList(msg.getMutationsList(),
    google_bigtable_v1_bigtable_data_pb.Mutation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.MutateRowRequest}
 */
proto.google.bigtable.v1.MutateRowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.MutateRowRequest;
  return proto.google.bigtable.v1.MutateRowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.MutateRowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.MutateRowRequest}
 */
proto.google.bigtable.v1.MutateRowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKey(value);
      break;
    case 3:
      var value = new google_bigtable_v1_bigtable_data_pb.Mutation;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.Mutation.deserializeBinaryFromReader);
      msg.addMutations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.MutateRowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.MutateRowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRowKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMutationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_bigtable_v1_bigtable_data_pb.Mutation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.v1.MutateRowRequest} returns this
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes row_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.getRowKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes row_key = 2;
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {string}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.getRowKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKey()));
};


/**
 * optional bytes row_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.getRowKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.v1.MutateRowRequest} returns this
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.setRowKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Mutation mutations = 3;
 * @return {!Array<!proto.google.bigtable.v1.Mutation>}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.getMutationsList = function() {
  return /** @type{!Array<!proto.google.bigtable.v1.Mutation>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_bigtable_v1_bigtable_data_pb.Mutation, 3));
};


/**
 * @param {!Array<!proto.google.bigtable.v1.Mutation>} value
 * @return {!proto.google.bigtable.v1.MutateRowRequest} returns this
*/
proto.google.bigtable.v1.MutateRowRequest.prototype.setMutationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.bigtable.v1.Mutation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.v1.Mutation}
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.addMutations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.bigtable.v1.Mutation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.MutateRowRequest} returns this
 */
proto.google.bigtable.v1.MutateRowRequest.prototype.clearMutationsList = function() {
  return this.setMutationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.v1.MutateRowsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.MutateRowsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.MutateRowsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.MutateRowsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.google.bigtable.v1.MutateRowsRequest.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.MutateRowsRequest}
 */
proto.google.bigtable.v1.MutateRowsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.MutateRowsRequest;
  return proto.google.bigtable.v1.MutateRowsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.MutateRowsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.MutateRowsRequest}
 */
proto.google.bigtable.v1.MutateRowsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = new proto.google.bigtable.v1.MutateRowsRequest.Entry;
      reader.readMessage(value,proto.google.bigtable.v1.MutateRowsRequest.Entry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.MutateRowsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.MutateRowsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.MutateRowsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.google.bigtable.v1.MutateRowsRequest.Entry.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.MutateRowsRequest.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.MutateRowsRequest.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowKey: msg.getRowKey_asB64(),
    mutationsList: jspb.Message.toObjectList(msg.getMutationsList(),
    google_bigtable_v1_bigtable_data_pb.Mutation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.MutateRowsRequest.Entry}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.MutateRowsRequest.Entry;
  return proto.google.bigtable.v1.MutateRowsRequest.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.MutateRowsRequest.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.MutateRowsRequest.Entry}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKey(value);
      break;
    case 2:
      var value = new google_bigtable_v1_bigtable_data_pb.Mutation;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.Mutation.deserializeBinaryFromReader);
      msg.addMutations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.MutateRowsRequest.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.MutateRowsRequest.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMutationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      google_bigtable_v1_bigtable_data_pb.Mutation.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes row_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.getRowKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes row_key = 1;
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {string}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.getRowKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKey()));
};


/**
 * optional bytes row_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.getRowKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.v1.MutateRowsRequest.Entry} returns this
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.setRowKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Mutation mutations = 2;
 * @return {!Array<!proto.google.bigtable.v1.Mutation>}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.getMutationsList = function() {
  return /** @type{!Array<!proto.google.bigtable.v1.Mutation>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_bigtable_v1_bigtable_data_pb.Mutation, 2));
};


/**
 * @param {!Array<!proto.google.bigtable.v1.Mutation>} value
 * @return {!proto.google.bigtable.v1.MutateRowsRequest.Entry} returns this
*/
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.setMutationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.google.bigtable.v1.Mutation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.v1.Mutation}
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.addMutations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.google.bigtable.v1.Mutation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.MutateRowsRequest.Entry} returns this
 */
proto.google.bigtable.v1.MutateRowsRequest.Entry.prototype.clearMutationsList = function() {
  return this.setMutationsList([]);
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.google.bigtable.v1.MutateRowsRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.v1.MutateRowsRequest} returns this
 */
proto.google.bigtable.v1.MutateRowsRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Entry entries = 2;
 * @return {!Array<!proto.google.bigtable.v1.MutateRowsRequest.Entry>}
 */
proto.google.bigtable.v1.MutateRowsRequest.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.google.bigtable.v1.MutateRowsRequest.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.google.bigtable.v1.MutateRowsRequest.Entry, 2));
};


/**
 * @param {!Array<!proto.google.bigtable.v1.MutateRowsRequest.Entry>} value
 * @return {!proto.google.bigtable.v1.MutateRowsRequest} returns this
*/
proto.google.bigtable.v1.MutateRowsRequest.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.google.bigtable.v1.MutateRowsRequest.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.v1.MutateRowsRequest.Entry}
 */
proto.google.bigtable.v1.MutateRowsRequest.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.google.bigtable.v1.MutateRowsRequest.Entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.MutateRowsRequest} returns this
 */
proto.google.bigtable.v1.MutateRowsRequest.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.v1.MutateRowsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.MutateRowsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.MutateRowsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.MutateRowsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusesList: jspb.Message.toObjectList(msg.getStatusesList(),
    google_rpc_status_pb.Status.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.MutateRowsResponse}
 */
proto.google.bigtable.v1.MutateRowsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.MutateRowsResponse;
  return proto.google.bigtable.v1.MutateRowsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.MutateRowsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.MutateRowsResponse}
 */
proto.google.bigtable.v1.MutateRowsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.addStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.MutateRowsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.MutateRowsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.MutateRowsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.MutateRowsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * repeated google.rpc.Status statuses = 1;
 * @return {!Array<!proto.google.rpc.Status>}
 */
proto.google.bigtable.v1.MutateRowsResponse.prototype.getStatusesList = function() {
  return /** @type{!Array<!proto.google.rpc.Status>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_rpc_status_pb.Status, 1));
};


/**
 * @param {!Array<!proto.google.rpc.Status>} value
 * @return {!proto.google.bigtable.v1.MutateRowsResponse} returns this
*/
proto.google.bigtable.v1.MutateRowsResponse.prototype.setStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.google.rpc.Status=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.rpc.Status}
 */
proto.google.bigtable.v1.MutateRowsResponse.prototype.addStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.rpc.Status, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.MutateRowsResponse} returns this
 */
proto.google.bigtable.v1.MutateRowsResponse.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.CheckAndMutateRowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.CheckAndMutateRowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rowKey: msg.getRowKey_asB64(),
    predicateFilter: (f = msg.getPredicateFilter()) && google_bigtable_v1_bigtable_data_pb.RowFilter.toObject(includeInstance, f),
    trueMutationsList: jspb.Message.toObjectList(msg.getTrueMutationsList(),
    google_bigtable_v1_bigtable_data_pb.Mutation.toObject, includeInstance),
    falseMutationsList: jspb.Message.toObjectList(msg.getFalseMutationsList(),
    google_bigtable_v1_bigtable_data_pb.Mutation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.CheckAndMutateRowRequest;
  return proto.google.bigtable.v1.CheckAndMutateRowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.CheckAndMutateRowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKey(value);
      break;
    case 6:
      var value = new google_bigtable_v1_bigtable_data_pb.RowFilter;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.RowFilter.deserializeBinaryFromReader);
      msg.setPredicateFilter(value);
      break;
    case 4:
      var value = new google_bigtable_v1_bigtable_data_pb.Mutation;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.Mutation.deserializeBinaryFromReader);
      msg.addTrueMutations(value);
      break;
    case 5:
      var value = new google_bigtable_v1_bigtable_data_pb.Mutation;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.Mutation.deserializeBinaryFromReader);
      msg.addFalseMutations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.CheckAndMutateRowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.CheckAndMutateRowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRowKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPredicateFilter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_bigtable_v1_bigtable_data_pb.RowFilter.serializeBinaryToWriter
    );
  }
  f = message.getTrueMutationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      google_bigtable_v1_bigtable_data_pb.Mutation.serializeBinaryToWriter
    );
  }
  f = message.getFalseMutationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      google_bigtable_v1_bigtable_data_pb.Mutation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes row_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.getRowKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes row_key = 2;
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {string}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.getRowKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKey()));
};


/**
 * optional bytes row_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.getRowKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.setRowKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional RowFilter predicate_filter = 6;
 * @return {?proto.google.bigtable.v1.RowFilter}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.getPredicateFilter = function() {
  return /** @type{?proto.google.bigtable.v1.RowFilter} */ (
    jspb.Message.getWrapperField(this, google_bigtable_v1_bigtable_data_pb.RowFilter, 6));
};


/**
 * @param {?proto.google.bigtable.v1.RowFilter|undefined} value
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
*/
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.setPredicateFilter = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.clearPredicateFilter = function() {
  return this.setPredicateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.hasPredicateFilter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Mutation true_mutations = 4;
 * @return {!Array<!proto.google.bigtable.v1.Mutation>}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.getTrueMutationsList = function() {
  return /** @type{!Array<!proto.google.bigtable.v1.Mutation>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_bigtable_v1_bigtable_data_pb.Mutation, 4));
};


/**
 * @param {!Array<!proto.google.bigtable.v1.Mutation>} value
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
*/
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.setTrueMutationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.google.bigtable.v1.Mutation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.v1.Mutation}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.addTrueMutations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.google.bigtable.v1.Mutation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.clearTrueMutationsList = function() {
  return this.setTrueMutationsList([]);
};


/**
 * repeated Mutation false_mutations = 5;
 * @return {!Array<!proto.google.bigtable.v1.Mutation>}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.getFalseMutationsList = function() {
  return /** @type{!Array<!proto.google.bigtable.v1.Mutation>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_bigtable_v1_bigtable_data_pb.Mutation, 5));
};


/**
 * @param {!Array<!proto.google.bigtable.v1.Mutation>} value
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
*/
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.setFalseMutationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.google.bigtable.v1.Mutation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.v1.Mutation}
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.addFalseMutations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.google.bigtable.v1.Mutation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowRequest} returns this
 */
proto.google.bigtable.v1.CheckAndMutateRowRequest.prototype.clearFalseMutationsList = function() {
  return this.setFalseMutationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.CheckAndMutateRowResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.CheckAndMutateRowResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    predicateMatched: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowResponse}
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.CheckAndMutateRowResponse;
  return proto.google.bigtable.v1.CheckAndMutateRowResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.CheckAndMutateRowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowResponse}
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPredicateMatched(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.CheckAndMutateRowResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.CheckAndMutateRowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPredicateMatched();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool predicate_matched = 1;
 * @return {boolean}
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.prototype.getPredicateMatched = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.bigtable.v1.CheckAndMutateRowResponse} returns this
 */
proto.google.bigtable.v1.CheckAndMutateRowResponse.prototype.setPredicateMatched = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.v1.ReadModifyWriteRowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.v1.ReadModifyWriteRowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rowKey: msg.getRowKey_asB64(),
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    google_bigtable_v1_bigtable_data_pb.ReadModifyWriteRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.v1.ReadModifyWriteRowRequest}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.v1.ReadModifyWriteRowRequest;
  return proto.google.bigtable.v1.ReadModifyWriteRowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.v1.ReadModifyWriteRowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.v1.ReadModifyWriteRowRequest}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKey(value);
      break;
    case 3:
      var value = new google_bigtable_v1_bigtable_data_pb.ReadModifyWriteRule;
      reader.readMessage(value,google_bigtable_v1_bigtable_data_pb.ReadModifyWriteRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.v1.ReadModifyWriteRowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.v1.ReadModifyWriteRowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRowKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_bigtable_v1_bigtable_data_pb.ReadModifyWriteRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.v1.ReadModifyWriteRowRequest} returns this
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes row_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.getRowKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes row_key = 2;
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {string}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.getRowKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKey()));
};


/**
 * optional bytes row_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKey()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.getRowKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.v1.ReadModifyWriteRowRequest} returns this
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.setRowKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated ReadModifyWriteRule rules = 3;
 * @return {!Array<!proto.google.bigtable.v1.ReadModifyWriteRule>}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.google.bigtable.v1.ReadModifyWriteRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_bigtable_v1_bigtable_data_pb.ReadModifyWriteRule, 3));
};


/**
 * @param {!Array<!proto.google.bigtable.v1.ReadModifyWriteRule>} value
 * @return {!proto.google.bigtable.v1.ReadModifyWriteRowRequest} returns this
*/
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.setRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.bigtable.v1.ReadModifyWriteRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.v1.ReadModifyWriteRule}
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.bigtable.v1.ReadModifyWriteRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.v1.ReadModifyWriteRowRequest} returns this
 */
proto.google.bigtable.v1.ReadModifyWriteRowRequest.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};


goog.object.extend(exports, proto.google.bigtable.v1);

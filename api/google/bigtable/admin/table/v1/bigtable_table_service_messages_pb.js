// source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_bigtable_admin_table_v1_bigtable_table_data_pb = require('../../../../../google/bigtable/admin/table/v1/bigtable_table_data_pb.js');
goog.object.extend(proto, google_bigtable_admin_table_v1_bigtable_table_data_pb);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.TargetCase', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.CreateTableRequest', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.DeleteTableRequest', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.GetTableRequest', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.ListTablesRequest', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.ListTablesResponse', null, global);
goog.exportSymbol('proto.google.bigtable.admin.table.v1.RenameTableRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.admin.table.v1.CreateTableRequest.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.CreateTableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.CreateTableRequest.displayName = 'proto.google.bigtable.admin.table.v1.CreateTableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.ListTablesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.ListTablesRequest.displayName = 'proto.google.bigtable.admin.table.v1.ListTablesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.bigtable.admin.table.v1.ListTablesResponse.repeatedFields_, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.ListTablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.ListTablesResponse.displayName = 'proto.google.bigtable.admin.table.v1.ListTablesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.GetTableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.GetTableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.GetTableRequest.displayName = 'proto.google.bigtable.admin.table.v1.GetTableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.DeleteTableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.DeleteTableRequest.displayName = 'proto.google.bigtable.admin.table.v1.DeleteTableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.RenameTableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.RenameTableRequest.displayName = 'proto.google.bigtable.admin.table.v1.RenameTableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.displayName = 'proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.displayName = 'proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.oneofGroups_);
};
goog.inherits(proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.displayName = 'proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.CreateTableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.CreateTableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    table: (f = msg.getTable()) && google_bigtable_admin_table_v1_bigtable_table_data_pb.Table.toObject(includeInstance, f),
    initialSplitKeysList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.CreateTableRequest;
  return proto.google.bigtable.admin.table.v1.CreateTableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.CreateTableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableId(value);
      break;
    case 3:
      var value = new google_bigtable_admin_table_v1_bigtable_table_data_pb.Table;
      reader.readMessage(value,google_bigtable_admin_table_v1_bigtable_table_data_pb.Table.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addInitialSplitKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.CreateTableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.CreateTableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTable();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_bigtable_admin_table_v1_bigtable_table_data_pb.Table.serializeBinaryToWriter
    );
  }
  f = message.getInitialSplitKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string table_id = 2;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.getTableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.setTableId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Table table = 3;
 * @return {?proto.google.bigtable.admin.table.v1.Table}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.getTable = function() {
  return /** @type{?proto.google.bigtable.admin.table.v1.Table} */ (
    jspb.Message.getWrapperField(this, google_bigtable_admin_table_v1_bigtable_table_data_pb.Table, 3));
};


/**
 * @param {?proto.google.bigtable.admin.table.v1.Table|undefined} value
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest} returns this
*/
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.setTable = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.clearTable = function() {
  return this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.hasTable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string initial_split_keys = 4;
 * @return {!Array<string>}
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.getInitialSplitKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.setInitialSplitKeysList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.addInitialSplitKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.admin.table.v1.CreateTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateTableRequest.prototype.clearInitialSplitKeysList = function() {
  return this.setInitialSplitKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.ListTablesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.ListTablesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.ListTablesRequest}
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.ListTablesRequest;
  return proto.google.bigtable.admin.table.v1.ListTablesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.ListTablesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.ListTablesRequest}
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.ListTablesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.ListTablesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.ListTablesRequest} returns this
 */
proto.google.bigtable.admin.table.v1.ListTablesRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.ListTablesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.ListTablesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablesList: jspb.Message.toObjectList(msg.getTablesList(),
    google_bigtable_admin_table_v1_bigtable_table_data_pb.Table.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.ListTablesResponse}
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.ListTablesResponse;
  return proto.google.bigtable.admin.table.v1.ListTablesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.ListTablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.ListTablesResponse}
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_bigtable_admin_table_v1_bigtable_table_data_pb.Table;
      reader.readMessage(value,google_bigtable_admin_table_v1_bigtable_table_data_pb.Table.deserializeBinaryFromReader);
      msg.addTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.ListTablesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.ListTablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      google_bigtable_admin_table_v1_bigtable_table_data_pb.Table.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Table tables = 1;
 * @return {!Array<!proto.google.bigtable.admin.table.v1.Table>}
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.prototype.getTablesList = function() {
  return /** @type{!Array<!proto.google.bigtable.admin.table.v1.Table>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_bigtable_admin_table_v1_bigtable_table_data_pb.Table, 1));
};


/**
 * @param {!Array<!proto.google.bigtable.admin.table.v1.Table>} value
 * @return {!proto.google.bigtable.admin.table.v1.ListTablesResponse} returns this
*/
proto.google.bigtable.admin.table.v1.ListTablesResponse.prototype.setTablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.google.bigtable.admin.table.v1.Table=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.bigtable.admin.table.v1.Table}
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.prototype.addTables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.bigtable.admin.table.v1.Table, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.bigtable.admin.table.v1.ListTablesResponse} returns this
 */
proto.google.bigtable.admin.table.v1.ListTablesResponse.prototype.clearTablesList = function() {
  return this.setTablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.GetTableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.GetTableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.GetTableRequest}
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.GetTableRequest;
  return proto.google.bigtable.admin.table.v1.GetTableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.GetTableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.GetTableRequest}
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.GetTableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.GetTableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.GetTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.GetTableRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.DeleteTableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.DeleteTableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.DeleteTableRequest}
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.DeleteTableRequest;
  return proto.google.bigtable.admin.table.v1.DeleteTableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.DeleteTableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.DeleteTableRequest}
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.DeleteTableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.DeleteTableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.DeleteTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.DeleteTableRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.RenameTableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.RenameTableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.RenameTableRequest}
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.RenameTableRequest;
  return proto.google.bigtable.admin.table.v1.RenameTableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.RenameTableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.RenameTableRequest}
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.RenameTableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.RenameTableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.RenameTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_id = 2;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.prototype.getNewId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.RenameTableRequest} returns this
 */
proto.google.bigtable.admin.table.v1.RenameTableRequest.prototype.setNewId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnFamilyId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnFamily: (f = msg.getColumnFamily()) && google_bigtable_admin_table_v1_bigtable_table_data_pb.ColumnFamily.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest;
  return proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnFamilyId(value);
      break;
    case 3:
      var value = new google_bigtable_admin_table_v1_bigtable_table_data_pb.ColumnFamily;
      reader.readMessage(value,google_bigtable_admin_table_v1_bigtable_table_data_pb.ColumnFamily.deserializeBinaryFromReader);
      msg.setColumnFamily(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnFamilyId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnFamily();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_bigtable_admin_table_v1_bigtable_table_data_pb.ColumnFamily.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string column_family_id = 2;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.getColumnFamilyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.setColumnFamilyId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ColumnFamily column_family = 3;
 * @return {?proto.google.bigtable.admin.table.v1.ColumnFamily}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.getColumnFamily = function() {
  return /** @type{?proto.google.bigtable.admin.table.v1.ColumnFamily} */ (
    jspb.Message.getWrapperField(this, google_bigtable_admin_table_v1_bigtable_table_data_pb.ColumnFamily, 3));
};


/**
 * @param {?proto.google.bigtable.admin.table.v1.ColumnFamily|undefined} value
 * @return {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest} returns this
*/
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.setColumnFamily = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest} returns this
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.clearColumnFamily = function() {
  return this.setColumnFamily(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.prototype.hasColumnFamily = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest}
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest;
  return proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest}
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest} returns this
 */
proto.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.TargetCase = {
  TARGET_NOT_SET: 0,
  ROW_KEY_PREFIX: 2,
  DELETE_ALL_DATA_FROM_TABLE: 3
};

/**
 * @return {proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.TargetCase}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.getTargetCase = function() {
  return /** @type {proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.TargetCase} */(jspb.Message.computeOneofCase(this, proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rowKeyPrefix: msg.getRowKeyPrefix_asB64(),
    deleteAllDataFromTable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest;
  return proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRowKeyPrefix(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleteAllDataFromTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} returns this
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes row_key_prefix = 2;
 * @return {!(string|Uint8Array)}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.getRowKeyPrefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes row_key_prefix = 2;
 * This is a type-conversion wrapper around `getRowKeyPrefix()`
 * @return {string}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.getRowKeyPrefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRowKeyPrefix()));
};


/**
 * optional bytes row_key_prefix = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRowKeyPrefix()`
 * @return {!Uint8Array}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.getRowKeyPrefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRowKeyPrefix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} returns this
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.setRowKeyPrefix = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} returns this
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.clearRowKeyPrefix = function() {
  return jspb.Message.setOneofField(this, 2, proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.hasRowKeyPrefix = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool delete_all_data_from_table = 3;
 * @return {boolean}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.getDeleteAllDataFromTable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} returns this
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.setDeleteAllDataFromTable = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest} returns this
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.clearDeleteAllDataFromTable = function() {
  return jspb.Message.setOneofField(this, 3, proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.bigtable.admin.table.v1.BulkDeleteRowsRequest.prototype.hasDeleteAllDataFromTable = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.google.bigtable.admin.table.v1);

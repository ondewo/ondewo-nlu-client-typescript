import * as jspb from 'google-protobuf'

import * as google_devtools_containeranalysis_v1beta1_common_common_pb from '../../../../../google/devtools/containeranalysis/v1beta1/common/common_pb';
import * as google_devtools_containeranalysis_v1beta1_package_package_pb from '../../../../../google/devtools/containeranalysis/v1beta1/package/package_pb';


export class Vulnerability extends jspb.Message {
  getCvssScore(): number;
  setCvssScore(value: number): Vulnerability;

  getSeverity(): Severity;
  setSeverity(value: Severity): Vulnerability;

  getDetailsList(): Array<Vulnerability.Detail>;
  setDetailsList(value: Array<Vulnerability.Detail>): Vulnerability;
  clearDetailsList(): Vulnerability;
  addDetails(value?: Vulnerability.Detail, index?: number): Vulnerability.Detail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Vulnerability.AsObject;
  static toObject(includeInstance: boolean, msg: Vulnerability): Vulnerability.AsObject;
  static serializeBinaryToWriter(message: Vulnerability, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Vulnerability;
  static deserializeBinaryFromReader(message: Vulnerability, reader: jspb.BinaryReader): Vulnerability;
}

export namespace Vulnerability {
  export type AsObject = {
    cvssScore: number,
    severity: Severity,
    detailsList: Array<Vulnerability.Detail.AsObject>,
  }

  export class Detail extends jspb.Message {
    getCpeUri(): string;
    setCpeUri(value: string): Detail;

    getPackage(): string;
    setPackage(value: string): Detail;

    getMinAffectedVersion(): google_devtools_containeranalysis_v1beta1_package_package_pb.Version | undefined;
    setMinAffectedVersion(value?: google_devtools_containeranalysis_v1beta1_package_package_pb.Version): Detail;
    hasMinAffectedVersion(): boolean;
    clearMinAffectedVersion(): Detail;

    getMaxAffectedVersion(): google_devtools_containeranalysis_v1beta1_package_package_pb.Version | undefined;
    setMaxAffectedVersion(value?: google_devtools_containeranalysis_v1beta1_package_package_pb.Version): Detail;
    hasMaxAffectedVersion(): boolean;
    clearMaxAffectedVersion(): Detail;

    getSeverityName(): string;
    setSeverityName(value: string): Detail;

    getDescription(): string;
    setDescription(value: string): Detail;

    getFixedLocation(): VulnerabilityLocation | undefined;
    setFixedLocation(value?: VulnerabilityLocation): Detail;
    hasFixedLocation(): boolean;
    clearFixedLocation(): Detail;

    getPackageType(): string;
    setPackageType(value: string): Detail;

    getIsObsolete(): boolean;
    setIsObsolete(value: boolean): Detail;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Detail.AsObject;
    static toObject(includeInstance: boolean, msg: Detail): Detail.AsObject;
    static serializeBinaryToWriter(message: Detail, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Detail;
    static deserializeBinaryFromReader(message: Detail, reader: jspb.BinaryReader): Detail;
  }

  export namespace Detail {
    export type AsObject = {
      cpeUri: string,
      pb_package: string,
      minAffectedVersion?: google_devtools_containeranalysis_v1beta1_package_package_pb.Version.AsObject,
      maxAffectedVersion?: google_devtools_containeranalysis_v1beta1_package_package_pb.Version.AsObject,
      severityName: string,
      description: string,
      fixedLocation?: VulnerabilityLocation.AsObject,
      packageType: string,
      isObsolete: boolean,
    }
  }

}

export class Details extends jspb.Message {
  getType(): string;
  setType(value: string): Details;

  getSeverity(): Severity;
  setSeverity(value: Severity): Details;

  getCvssScore(): number;
  setCvssScore(value: number): Details;

  getPackageIssueList(): Array<PackageIssue>;
  setPackageIssueList(value: Array<PackageIssue>): Details;
  clearPackageIssueList(): Details;
  addPackageIssue(value?: PackageIssue, index?: number): PackageIssue;

  getShortDescription(): string;
  setShortDescription(value: string): Details;

  getLongDescription(): string;
  setLongDescription(value: string): Details;

  getRelatedUrlsList(): Array<google_devtools_containeranalysis_v1beta1_common_common_pb.RelatedUrl>;
  setRelatedUrlsList(value: Array<google_devtools_containeranalysis_v1beta1_common_common_pb.RelatedUrl>): Details;
  clearRelatedUrlsList(): Details;
  addRelatedUrls(value?: google_devtools_containeranalysis_v1beta1_common_common_pb.RelatedUrl, index?: number): google_devtools_containeranalysis_v1beta1_common_common_pb.RelatedUrl;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Details.AsObject;
  static toObject(includeInstance: boolean, msg: Details): Details.AsObject;
  static serializeBinaryToWriter(message: Details, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Details;
  static deserializeBinaryFromReader(message: Details, reader: jspb.BinaryReader): Details;
}

export namespace Details {
  export type AsObject = {
    type: string,
    severity: Severity,
    cvssScore: number,
    packageIssueList: Array<PackageIssue.AsObject>,
    shortDescription: string,
    longDescription: string,
    relatedUrlsList: Array<google_devtools_containeranalysis_v1beta1_common_common_pb.RelatedUrl.AsObject>,
  }
}

export class PackageIssue extends jspb.Message {
  getAffectedLocation(): VulnerabilityLocation | undefined;
  setAffectedLocation(value?: VulnerabilityLocation): PackageIssue;
  hasAffectedLocation(): boolean;
  clearAffectedLocation(): PackageIssue;

  getFixedLocation(): VulnerabilityLocation | undefined;
  setFixedLocation(value?: VulnerabilityLocation): PackageIssue;
  hasFixedLocation(): boolean;
  clearFixedLocation(): PackageIssue;

  getSeverityName(): string;
  setSeverityName(value: string): PackageIssue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PackageIssue.AsObject;
  static toObject(includeInstance: boolean, msg: PackageIssue): PackageIssue.AsObject;
  static serializeBinaryToWriter(message: PackageIssue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PackageIssue;
  static deserializeBinaryFromReader(message: PackageIssue, reader: jspb.BinaryReader): PackageIssue;
}

export namespace PackageIssue {
  export type AsObject = {
    affectedLocation?: VulnerabilityLocation.AsObject,
    fixedLocation?: VulnerabilityLocation.AsObject,
    severityName: string,
  }
}

export class VulnerabilityLocation extends jspb.Message {
  getCpeUri(): string;
  setCpeUri(value: string): VulnerabilityLocation;

  getPackage(): string;
  setPackage(value: string): VulnerabilityLocation;

  getVersion(): google_devtools_containeranalysis_v1beta1_package_package_pb.Version | undefined;
  setVersion(value?: google_devtools_containeranalysis_v1beta1_package_package_pb.Version): VulnerabilityLocation;
  hasVersion(): boolean;
  clearVersion(): VulnerabilityLocation;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VulnerabilityLocation.AsObject;
  static toObject(includeInstance: boolean, msg: VulnerabilityLocation): VulnerabilityLocation.AsObject;
  static serializeBinaryToWriter(message: VulnerabilityLocation, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VulnerabilityLocation;
  static deserializeBinaryFromReader(message: VulnerabilityLocation, reader: jspb.BinaryReader): VulnerabilityLocation;
}

export namespace VulnerabilityLocation {
  export type AsObject = {
    cpeUri: string,
    pb_package: string,
    version?: google_devtools_containeranalysis_v1beta1_package_package_pb.Version.AsObject,
  }
}

export enum Severity { 
  SEVERITY_UNSPECIFIED = 0,
  MINIMAL = 1,
  LOW = 2,
  MEDIUM = 3,
  HIGH = 4,
  CRITICAL = 5,
}

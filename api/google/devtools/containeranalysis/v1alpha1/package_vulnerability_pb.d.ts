import * as jspb from 'google-protobuf'

import * as google_api_annotations_pb from '../../../../google/api/annotations_pb';


export class VulnerabilityType extends jspb.Message {
  getCvssScore(): number;
  setCvssScore(value: number): VulnerabilityType;

  getSeverity(): VulnerabilityType.Severity;
  setSeverity(value: VulnerabilityType.Severity): VulnerabilityType;

  getDetailsList(): Array<VulnerabilityType.Detail>;
  setDetailsList(value: Array<VulnerabilityType.Detail>): VulnerabilityType;
  clearDetailsList(): VulnerabilityType;
  addDetails(value?: VulnerabilityType.Detail, index?: number): VulnerabilityType.Detail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VulnerabilityType.AsObject;
  static toObject(includeInstance: boolean, msg: VulnerabilityType): VulnerabilityType.AsObject;
  static serializeBinaryToWriter(message: VulnerabilityType, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VulnerabilityType;
  static deserializeBinaryFromReader(message: VulnerabilityType, reader: jspb.BinaryReader): VulnerabilityType;
}

export namespace VulnerabilityType {
  export type AsObject = {
    cvssScore: number,
    severity: VulnerabilityType.Severity,
    detailsList: Array<VulnerabilityType.Detail.AsObject>,
  }

  export class Version extends jspb.Message {
    getEpoch(): number;
    setEpoch(value: number): Version;

    getName(): string;
    setName(value: string): Version;

    getRevision(): string;
    setRevision(value: string): Version;

    getKind(): VulnerabilityType.Version.VersionKind;
    setKind(value: VulnerabilityType.Version.VersionKind): Version;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Version.AsObject;
    static toObject(includeInstance: boolean, msg: Version): Version.AsObject;
    static serializeBinaryToWriter(message: Version, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Version;
    static deserializeBinaryFromReader(message: Version, reader: jspb.BinaryReader): Version;
  }

  export namespace Version {
    export type AsObject = {
      epoch: number,
      name: string,
      revision: string,
      kind: VulnerabilityType.Version.VersionKind,
    }

    export enum VersionKind { 
      NORMAL = 0,
      MINIMUM = 1,
      MAXIMUM = 2,
    }
  }


  export class Detail extends jspb.Message {
    getCpeUri(): string;
    setCpeUri(value: string): Detail;

    getPackage(): string;
    setPackage(value: string): Detail;

    getMinAffectedVersion(): VulnerabilityType.Version | undefined;
    setMinAffectedVersion(value?: VulnerabilityType.Version): Detail;
    hasMinAffectedVersion(): boolean;
    clearMinAffectedVersion(): Detail;

    getMaxAffectedVersion(): VulnerabilityType.Version | undefined;
    setMaxAffectedVersion(value?: VulnerabilityType.Version): Detail;
    hasMaxAffectedVersion(): boolean;
    clearMaxAffectedVersion(): Detail;

    getSeverityName(): string;
    setSeverityName(value: string): Detail;

    getDescription(): string;
    setDescription(value: string): Detail;

    getFixedLocation(): VulnerabilityType.VulnerabilityLocation | undefined;
    setFixedLocation(value?: VulnerabilityType.VulnerabilityLocation): Detail;
    hasFixedLocation(): boolean;
    clearFixedLocation(): Detail;

    getPackageType(): string;
    setPackageType(value: string): Detail;

    getIsObsolete(): boolean;
    setIsObsolete(value: boolean): Detail;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Detail.AsObject;
    static toObject(includeInstance: boolean, msg: Detail): Detail.AsObject;
    static serializeBinaryToWriter(message: Detail, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Detail;
    static deserializeBinaryFromReader(message: Detail, reader: jspb.BinaryReader): Detail;
  }

  export namespace Detail {
    export type AsObject = {
      cpeUri: string,
      pb_package: string,
      minAffectedVersion?: VulnerabilityType.Version.AsObject,
      maxAffectedVersion?: VulnerabilityType.Version.AsObject,
      severityName: string,
      description: string,
      fixedLocation?: VulnerabilityType.VulnerabilityLocation.AsObject,
      packageType: string,
      isObsolete: boolean,
    }
  }


  export class VulnerabilityDetails extends jspb.Message {
    getType(): string;
    setType(value: string): VulnerabilityDetails;

    getSeverity(): VulnerabilityType.Severity;
    setSeverity(value: VulnerabilityType.Severity): VulnerabilityDetails;

    getCvssScore(): number;
    setCvssScore(value: number): VulnerabilityDetails;

    getPackageIssueList(): Array<VulnerabilityType.PackageIssue>;
    setPackageIssueList(value: Array<VulnerabilityType.PackageIssue>): VulnerabilityDetails;
    clearPackageIssueList(): VulnerabilityDetails;
    addPackageIssue(value?: VulnerabilityType.PackageIssue, index?: number): VulnerabilityType.PackageIssue;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VulnerabilityDetails.AsObject;
    static toObject(includeInstance: boolean, msg: VulnerabilityDetails): VulnerabilityDetails.AsObject;
    static serializeBinaryToWriter(message: VulnerabilityDetails, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VulnerabilityDetails;
    static deserializeBinaryFromReader(message: VulnerabilityDetails, reader: jspb.BinaryReader): VulnerabilityDetails;
  }

  export namespace VulnerabilityDetails {
    export type AsObject = {
      type: string,
      severity: VulnerabilityType.Severity,
      cvssScore: number,
      packageIssueList: Array<VulnerabilityType.PackageIssue.AsObject>,
    }
  }


  export class PackageIssue extends jspb.Message {
    getAffectedLocation(): VulnerabilityType.VulnerabilityLocation | undefined;
    setAffectedLocation(value?: VulnerabilityType.VulnerabilityLocation): PackageIssue;
    hasAffectedLocation(): boolean;
    clearAffectedLocation(): PackageIssue;

    getFixedLocation(): VulnerabilityType.VulnerabilityLocation | undefined;
    setFixedLocation(value?: VulnerabilityType.VulnerabilityLocation): PackageIssue;
    hasFixedLocation(): boolean;
    clearFixedLocation(): PackageIssue;

    getSeverityName(): string;
    setSeverityName(value: string): PackageIssue;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PackageIssue.AsObject;
    static toObject(includeInstance: boolean, msg: PackageIssue): PackageIssue.AsObject;
    static serializeBinaryToWriter(message: PackageIssue, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PackageIssue;
    static deserializeBinaryFromReader(message: PackageIssue, reader: jspb.BinaryReader): PackageIssue;
  }

  export namespace PackageIssue {
    export type AsObject = {
      affectedLocation?: VulnerabilityType.VulnerabilityLocation.AsObject,
      fixedLocation?: VulnerabilityType.VulnerabilityLocation.AsObject,
      severityName: string,
    }
  }


  export class VulnerabilityLocation extends jspb.Message {
    getCpeUri(): string;
    setCpeUri(value: string): VulnerabilityLocation;

    getPackage(): string;
    setPackage(value: string): VulnerabilityLocation;

    getVersion(): VulnerabilityType.Version | undefined;
    setVersion(value?: VulnerabilityType.Version): VulnerabilityLocation;
    hasVersion(): boolean;
    clearVersion(): VulnerabilityLocation;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VulnerabilityLocation.AsObject;
    static toObject(includeInstance: boolean, msg: VulnerabilityLocation): VulnerabilityLocation.AsObject;
    static serializeBinaryToWriter(message: VulnerabilityLocation, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VulnerabilityLocation;
    static deserializeBinaryFromReader(message: VulnerabilityLocation, reader: jspb.BinaryReader): VulnerabilityLocation;
  }

  export namespace VulnerabilityLocation {
    export type AsObject = {
      cpeUri: string,
      pb_package: string,
      version?: VulnerabilityType.Version.AsObject,
    }
  }


  export enum Severity { 
    SEVERITY_UNSPECIFIED = 0,
    MINIMAL = 1,
    LOW = 2,
    MEDIUM = 3,
    HIGH = 4,
    CRITICAL = 5,
  }
}


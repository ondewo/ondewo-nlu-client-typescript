// source: google/devtools/clouddebugger/v2/controller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_devtools_clouddebugger_v2_data_pb = require('../../../../google/devtools/clouddebugger/v2/data_pb.js');
goog.object.extend(proto, google_devtools_clouddebugger_v2_data_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest', null, global);
goog.exportSymbol('proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse', null, global);
goog.exportSymbol('proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest', null, global);
goog.exportSymbol('proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse', null, global);
goog.exportSymbol('proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest', null, global);
goog.exportSymbol('proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.displayName = 'proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.displayName = 'proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.displayName = 'proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.repeatedFields_, null);
};
goog.inherits(proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.displayName = 'proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.displayName = 'proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.displayName = 'proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    debuggee: (f = msg.getDebuggee()) && google_devtools_clouddebugger_v2_data_pb.Debuggee.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest;
  return proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_devtools_clouddebugger_v2_data_pb.Debuggee;
      reader.readMessage(value,google_devtools_clouddebugger_v2_data_pb.Debuggee.deserializeBinaryFromReader);
      msg.setDebuggee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebuggee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_devtools_clouddebugger_v2_data_pb.Debuggee.serializeBinaryToWriter
    );
  }
};


/**
 * optional Debuggee debuggee = 1;
 * @return {?proto.google.devtools.clouddebugger.v2.Debuggee}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.prototype.getDebuggee = function() {
  return /** @type{?proto.google.devtools.clouddebugger.v2.Debuggee} */ (
    jspb.Message.getWrapperField(this, google_devtools_clouddebugger_v2_data_pb.Debuggee, 1));
};


/**
 * @param {?proto.google.devtools.clouddebugger.v2.Debuggee|undefined} value
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest} returns this
*/
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.prototype.setDebuggee = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest} returns this
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.prototype.clearDebuggee = function() {
  return this.setDebuggee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.prototype.hasDebuggee = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    debuggee: (f = msg.getDebuggee()) && google_devtools_clouddebugger_v2_data_pb.Debuggee.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse;
  return proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_devtools_clouddebugger_v2_data_pb.Debuggee;
      reader.readMessage(value,google_devtools_clouddebugger_v2_data_pb.Debuggee.deserializeBinaryFromReader);
      msg.setDebuggee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebuggee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_devtools_clouddebugger_v2_data_pb.Debuggee.serializeBinaryToWriter
    );
  }
};


/**
 * optional Debuggee debuggee = 1;
 * @return {?proto.google.devtools.clouddebugger.v2.Debuggee}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.prototype.getDebuggee = function() {
  return /** @type{?proto.google.devtools.clouddebugger.v2.Debuggee} */ (
    jspb.Message.getWrapperField(this, google_devtools_clouddebugger_v2_data_pb.Debuggee, 1));
};


/**
 * @param {?proto.google.devtools.clouddebugger.v2.Debuggee|undefined} value
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse} returns this
*/
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.prototype.setDebuggee = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse} returns this
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.prototype.clearDebuggee = function() {
  return this.setDebuggee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.prototype.hasDebuggee = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    debuggeeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    waitToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    successOnTimeout: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest;
  return proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebuggeeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitToken(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccessOnTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebuggeeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWaitToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSuccessOnTimeout();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string debuggee_id = 1;
 * @return {string}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.getDebuggeeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest} returns this
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.setDebuggeeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string wait_token = 2;
 * @return {string}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.getWaitToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest} returns this
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.setWaitToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool success_on_timeout = 3;
 * @return {boolean}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.getSuccessOnTimeout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest} returns this
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.prototype.setSuccessOnTimeout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    breakpointsList: jspb.Message.toObjectList(msg.getBreakpointsList(),
    google_devtools_clouddebugger_v2_data_pb.Breakpoint.toObject, includeInstance),
    nextWaitToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    waitExpired: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse;
  return proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_devtools_clouddebugger_v2_data_pb.Breakpoint;
      reader.readMessage(value,google_devtools_clouddebugger_v2_data_pb.Breakpoint.deserializeBinaryFromReader);
      msg.addBreakpoints(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextWaitToken(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWaitExpired(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBreakpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      google_devtools_clouddebugger_v2_data_pb.Breakpoint.serializeBinaryToWriter
    );
  }
  f = message.getNextWaitToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWaitExpired();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated Breakpoint breakpoints = 1;
 * @return {!Array<!proto.google.devtools.clouddebugger.v2.Breakpoint>}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.getBreakpointsList = function() {
  return /** @type{!Array<!proto.google.devtools.clouddebugger.v2.Breakpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_devtools_clouddebugger_v2_data_pb.Breakpoint, 1));
};


/**
 * @param {!Array<!proto.google.devtools.clouddebugger.v2.Breakpoint>} value
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse} returns this
*/
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.setBreakpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.google.devtools.clouddebugger.v2.Breakpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.devtools.clouddebugger.v2.Breakpoint}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.addBreakpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.devtools.clouddebugger.v2.Breakpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse} returns this
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.clearBreakpointsList = function() {
  return this.setBreakpointsList([]);
};


/**
 * optional string next_wait_token = 2;
 * @return {string}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.getNextWaitToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse} returns this
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.setNextWaitToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool wait_expired = 3;
 * @return {boolean}
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.getWaitExpired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse} returns this
 */
proto.google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.prototype.setWaitExpired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    debuggeeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    breakpoint: (f = msg.getBreakpoint()) && google_devtools_clouddebugger_v2_data_pb.Breakpoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest;
  return proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebuggeeId(value);
      break;
    case 2:
      var value = new google_devtools_clouddebugger_v2_data_pb.Breakpoint;
      reader.readMessage(value,google_devtools_clouddebugger_v2_data_pb.Breakpoint.deserializeBinaryFromReader);
      msg.setBreakpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebuggeeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBreakpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_devtools_clouddebugger_v2_data_pb.Breakpoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string debuggee_id = 1;
 * @return {string}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.getDebuggeeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest} returns this
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.setDebuggeeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Breakpoint breakpoint = 2;
 * @return {?proto.google.devtools.clouddebugger.v2.Breakpoint}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.getBreakpoint = function() {
  return /** @type{?proto.google.devtools.clouddebugger.v2.Breakpoint} */ (
    jspb.Message.getWrapperField(this, google_devtools_clouddebugger_v2_data_pb.Breakpoint, 2));
};


/**
 * @param {?proto.google.devtools.clouddebugger.v2.Breakpoint|undefined} value
 * @return {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest} returns this
*/
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.setBreakpoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest} returns this
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.clearBreakpoint = function() {
  return this.setBreakpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.prototype.hasBreakpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse;
  return proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.google.devtools.clouddebugger.v2);
